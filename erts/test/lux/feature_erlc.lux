##
## %CopyrightBegin%
##
## Copyright Ericsson AB 2021-2022. All Rights Reserved.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## %CopyrightEnd%
##

[doc Tests of using enable_feature as an option to erlc]

[include features.luxinc]

[macro syntax-error expr]
    ?syntax error before: $expr
[endmacro]

[invoke setup]

[newshell cmds]
    -Unknown option
    # DO not user erlc server as it seems that under "sometimes" new
    # servers are added and left lingering
    !export ERLC_USE_SERVER=false
    ?SH-PROMPT:
    [invoke compile ignorant.erl ""]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile ignorant.erl "+'{enable_feature, ifn_expr}'"]
    ?syntax error before:
    ?syntax error before: ifn
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile ignorant.erl "+'{enable_feature, maybe_expr}'"]
    ?syntax error before: maybe
    ?syntax error before: maybe
    ?syntax error before: else
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile ignorant.erl "+'{enable_feature, ifn_expr}' +'{enable_feature, maybe_expr}'"]
    ?syntax error before:
    ?syntax error before: maybe
    ?syntax error before: else
    ?syntax error before: ifn
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_ifn.erl ""]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_ifn.erl "'+{enable_feature, ifn_expr}'"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_ifn.erl "'+{enable_feature, maybe_expr}'"]
    [invoke syntax-error maybe]
    [invoke syntax-error else]
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_ifn.erl "-enable-feature maybe_expr"]
    [invoke syntax-error maybe]
    [invoke syntax-error else]
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_ifn.erl "'+{enable_feature, maybe_expr}' '+{enable_feature, ifn_expr}'"]
    [invoke syntax-error maybe]
    [invoke syntax-error else]
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_ifn.erl "-enable-feature maybe_expr -enable-feature ifn_expr"]
    [invoke syntax-error maybe]
    [invoke syntax-error else]
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_maybe.erl ""]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe.erl "'+{enable_feature, maybe_expr}'"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe.erl "-enable-feature maybe_expr"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe.erl "'+{enable_feature, ifn_expr}'"]
    ?syntax error before:
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_maybe.erl "-enable-feature ifn_expr"]
    ?syntax error before:
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_maybe.erl "'+{enable_feature, maybe_expr}' '+{enable_feature, ifn_expr}'"]
    ?syntax error before:
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_maybe.erl "-enable-feature maybe_expr -enable-feature ifn_expr"]
    ?syntax error before:
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_maybe_ifn.erl ""]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "'+{enable_feature, maybe_expr}'"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "-enable-feature maybe_expr"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "'+{enable_feature, ifn_expr}'"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "-enable-feature ifn_expr"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "'+{enable_feature, maybe_expr}' '+{enable_feature, ifn_expr}'"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "-enable-feature maybe_expr -enable-feature ifn_expr"]
    ?SH-PROMPT:
    [invoke ok]

    # Long options
    [invoke compile f_ifn.erl "-enable-feature ifn_expr"]
    ?SH-PROMPT:
    [invoke ok]

    # This file has instances of -compile({enable_feature, ..}) inside
    [invoke compile f_directives.erl ""]
    ?SH-PROMPT:
    [invoke ok]

[newshell erl]
    [invoke start-erl ""]
    [invoke erl-compile ignorant.erl []]
    ???{ok,ignorant}
    ?$ERLPROMPT

    [invoke erl-compile ignorant.erl [{enable_feature,ifn_expr}]]
    ?syntax error before:
    ?syntax error before:
    ?error
    ?$ERLPROMPT

    [invoke erl-compile ignorant.erl [{enable_feature,ifn_expr},{enable_feature,maybe_expr}]]
    ?syntax error before:
    ?syntax error before: maybe
    ?syntax error before: else
    ?syntax error before: ifn
    ?error
    ?$ERLPROMPT

    [invoke erl-compile f_directives.erl []]
    ???{ok,f_directives}
    ?$ERLPROMPT

    # As we have not enabled any features, this load should not be
    # allowed (if we have inserted the features used in the meta chunk).
    !l(f_directives).
    ??{error,not_allowed}
    ?$ERLPROMPT

    !features:features_used(f_maybe_ifn).
    # Order not defined
    ???[ifn_expr,maybe_expr]

[shell cmds]
    [invoke compile f_macros.erl ""]
    ?SH-PROMPT:
    [invoke ok]

[shell erl]
    !l(f_macros).
    ?{module,f_macros}
    ?$ERLPROMPT

    !f_macros:has_ifn().
    ?true
    ?$ERLPROMPT

    !f_macros:has_hindly_milner().
    ?false
    ?$ERLPROMPT

    !f_macros:with_hm().
    ?false
    ?$ERLPROMPT

    !f_macros:uses_ifn().
    ?false
    ?$ERLPROMPT

    !f_macros:uses_maybe().
    ?false
    ?$ERLPROMPT

[shell cmds]
    [invoke compile f_macros.erl "-enable-feature ifn_expr"]
    ?SH-PROMPT:
    [invoke ok]

[shell erl]
    !l(f_macros).
    ??{error,not_allowed}
    ?$ERLPROMPT

    # Check which features were used during compilation
    !features:features_used(f_macros).
    ???[ifn_expr]
    ?$ERLPROMPT

    # Somewhat questionable if we really should allow this in runtime
    # FIXME WE should *not* allow this at runtime.
    !features:enable_feature(ifn_expr).
    ??[ifn_expr]
    ?$ERLPROMPT

    !l(f_macros).
    ?{module,f_macros}
    ?$ERLPROMPT

    !f_macros:uses_ifn().
    ?true
    ?$ERLPROMPT

    !f_macros:uses_maybe().
    ?false
    ?$ERLPROMPT

    [invoke quit-erl]

    !rm -f $outdir/f_macros.beam
    ?SH-PROMPT:

    [invoke start-erl ""]

    [invoke erl-compile f_macros.erl [{enable_feature,ifn_expr}]]
    ???{ok,f_macros}
    ?$ERLPROMPT

    # This should be allowed as we have not enabled the feature in the
    # runtime
    !l(f_macros).
    ??{error,not_allowed}
    ?$ERLPROMPT

    [invoke quit-erl]

    [invoke start-erl "-enable-feature ifn_expr"]
    !l(f_macros).
    ??{module,f_macros}
    ?$ERLPROMPT

    [invoke quit-erl]

    [invoke start-erl ""]

[shell cmds]
    [invoke compile f_macros.erl "-enable-feature maybe_expr"]
    ?SH-PROMPT:
    [invoke ok]

[shell erl]
    !features:enable_feature(ifn_expr).
    ??[ifn_expr]
    ?$ERLPROMPT

    !features:enable_feature(maybe_expr).
    ??[maybe_expr,ifn_expr]
    ?$ERLPROMPT

    !l(f_macros).
    ?{module,f_macros}
    ?$ERLPROMPT

    !f_macros:uses_ifn().
    ?false
    ?$ERLPROMPT

    !f_macros:uses_maybe().
    ?true
    ?$ERLPROMPT

[shell cmds]
    [invoke compile f_macros.erl "-enable-feature ifn_expr -enable-feature maybe_expr"]
    ?SH-PROMPT:
    [invoke ok]

[shell erl]
    !l(f_macros).
    ?{module,f_macros}
    ?$ERLPROMPT

    !f_macros:uses_ifn().
    ?true
    ?$ERLPROMPT

    !f_macros:uses_maybe().
    ?true
    ?$ERLPROMPT

[shell cmds]
    [invoke compile f_use_ifn.erl ""]
    ?syntax error before: X
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_use_ifn.erl "-enable-feature ifn_expr"]
    ?SH-PROMPT:
    [invoke ok]

    [shell erl]
    !f_use_ifn:use_ifn(0).
    ???!(0 > 0)
    ?$ERLPROMPT

[shell cmds]
    [invoke compile f_disable.erl "-enable-feature ifn_expr -enable-feature maybe_expr"]
    ?SH-PROMPT:
    [invoke ok]

[shell erl]
    !f_disable:no_ifn().
    # FIXME Should really be 'maybe' since it is enabled
    ???['ifn','maybe',no_ifn]
    ?$ERLPROMPT

    !f_disable:no_ftrs().
    ???['ifn','maybe','else',no_maybe]
    ?$ERLPROMPT

[shell cmds]
    [invoke compile ignorant.erl "+warn_keywords"]
    # Note: not all messges are checked
    ?atom 'maybe' is reserved in the experimental feature 'maybe_expr'
    ?atom 'else' is reserved in the experimental feature 'maybe_expr'
    ?atom 'ifn' is reserved in the experimental feature 'ifn_expr'
    [invoke ok]

    [invoke compile ignorant.erl "+warn_keywords -Werror"]
    # Note: not all messges are checked
    ?atom 'maybe' is reserved in the experimental feature 'maybe_expr'
    ?atom 'else' is reserved in the experimental feature 'maybe_expr'
    ?atom 'ifn' is reserved in the experimental feature 'ifn_expr'
    [invoke notok]

    # This file has a directive for keyword warnings
    [invoke compile ignorant_directive.erl ""]
    # Note: not all messges are checked
    ?Warning: atom 'maybe' is reserved in the experimental feature 'maybe_expr'
    ?Warning: atom 'else' is reserved in the experimental feature 'maybe_expr'
    ?Warning: atom 'ifn' is reserved in the experimental feature 'ifn_expr'
    [invoke ok]

    # This file has a directive for keyword warnings
    # NOTE: This behaviour is inconsistent with that of enabling features,
    # where what is in the file takes precedence.
    [invoke compile ignorant_directive.erl "+nowarn_keywords"]
    # Expect no warning
    -Warning
    [invoke ok]

[cleanup]
    !rm -fr $outdir
